// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // $, reduce: Statements
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			reduce(3), // lparen, reduce: Statements
			nil,       // rparen
			reduce(3), // int, reduce: Statements
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // $
			nil,          // empty
			nil,          // semicolon
			nil,          // plus
			nil,          // minus
			nil,          // mul
			nil,          // div
			nil,          // lparen
			nil,          // rparen
			nil,          // int
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // $, reduce: Program
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			shift(7),  // lparen
			nil,       // rparen
			shift(8),  // int
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // $, reduce: Statements
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			reduce(2), // lparen, reduce: Statements
			nil,       // rparen
			reduce(2), // int, reduce: Statements
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			shift(9),  // semicolon
			shift(11), // plus
			shift(12), // minus
			nil,       // mul
			nil,       // div
			nil,       // lparen
			nil,       // rparen
			nil,       // int
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			reduce(6), // semicolon, reduce: Expression
			reduce(6), // plus, reduce: Expression
			reduce(6), // minus, reduce: Expression
			shift(13), // mul
			shift(14), // div
			nil,       // lparen
			nil,       // rparen
			nil,       // int
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(11), // semicolon, reduce: Term
			reduce(11), // plus, reduce: Term
			reduce(11), // minus, reduce: Term
			reduce(11), // mul, reduce: Term
			reduce(11), // div, reduce: Term
			nil,        // lparen
			nil,        // rparen
			nil,        // int
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			shift(18), // lparen
			nil,       // rparen
			shift(19), // int
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(13), // semicolon, reduce: Factor
			reduce(13), // plus, reduce: Factor
			reduce(13), // minus, reduce: Factor
			reduce(13), // mul, reduce: Factor
			reduce(13), // div, reduce: Factor
			nil,        // lparen
			nil,        // rparen
			nil,        // int
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // $, reduce: Statement
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			reduce(4), // lparen, reduce: Statement
			nil,       // rparen
			reduce(4), // int, reduce: Statement
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // semicolon
			nil,      // plus
			nil,      // minus
			nil,      // mul
			nil,      // div
			shift(7), // lparen
			nil,      // rparen
			shift(8), // int
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			reduce(7), // lparen, reduce: Operation
			nil,       // rparen
			reduce(7), // int, reduce: Operation
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			reduce(8), // lparen, reduce: Operation
			nil,       // rparen
			reduce(8), // int, reduce: Operation
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // semicolon
			nil,      // plus
			nil,      // minus
			nil,      // mul
			nil,      // div
			shift(7), // lparen
			nil,      // rparen
			shift(8), // int
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // semicolon
			nil,      // plus
			nil,      // minus
			nil,      // mul
			nil,      // div
			shift(7), // lparen
			nil,      // rparen
			shift(8), // int
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			shift(11), // plus
			shift(12), // minus
			nil,       // mul
			nil,       // div
			nil,       // lparen
			shift(24), // rparen
			nil,       // int
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			reduce(6), // plus, reduce: Expression
			reduce(6), // minus, reduce: Expression
			shift(25), // mul
			shift(26), // div
			nil,       // lparen
			reduce(6), // rparen, reduce: Expression
			nil,       // int
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // semicolon
			reduce(11), // plus, reduce: Term
			reduce(11), // minus, reduce: Term
			reduce(11), // mul, reduce: Term
			reduce(11), // div, reduce: Term
			nil,        // lparen
			reduce(11), // rparen, reduce: Term
			nil,        // int
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			shift(18), // lparen
			nil,       // rparen
			shift(19), // int
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // semicolon
			reduce(13), // plus, reduce: Factor
			reduce(13), // minus, reduce: Factor
			reduce(13), // mul, reduce: Factor
			reduce(13), // div, reduce: Factor
			nil,        // lparen
			reduce(13), // rparen, reduce: Factor
			nil,        // int
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			reduce(5), // semicolon, reduce: Expression
			reduce(5), // plus, reduce: Expression
			reduce(5), // minus, reduce: Expression
			shift(13), // mul
			shift(14), // div
			nil,       // lparen
			nil,       // rparen
			nil,       // int
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			reduce(9), // semicolon, reduce: Term
			reduce(9), // plus, reduce: Term
			reduce(9), // minus, reduce: Term
			reduce(9), // mul, reduce: Term
			reduce(9), // div, reduce: Term
			nil,       // lparen
			nil,       // rparen
			nil,       // int
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(10), // semicolon, reduce: Term
			reduce(10), // plus, reduce: Term
			reduce(10), // minus, reduce: Term
			reduce(10), // mul, reduce: Term
			reduce(10), // div, reduce: Term
			nil,        // lparen
			nil,        // rparen
			nil,        // int
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			shift(18), // lparen
			nil,       // rparen
			shift(19), // int
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(12), // semicolon, reduce: Factor
			reduce(12), // plus, reduce: Factor
			reduce(12), // minus, reduce: Factor
			reduce(12), // mul, reduce: Factor
			reduce(12), // div, reduce: Factor
			nil,        // lparen
			nil,        // rparen
			nil,        // int
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			shift(18), // lparen
			nil,       // rparen
			shift(19), // int
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			shift(18), // lparen
			nil,       // rparen
			shift(19), // int
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			shift(11), // plus
			shift(12), // minus
			nil,       // mul
			nil,       // div
			nil,       // lparen
			shift(31), // rparen
			nil,       // int
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			reduce(5), // plus, reduce: Expression
			reduce(5), // minus, reduce: Expression
			shift(25), // mul
			shift(26), // div
			nil,       // lparen
			reduce(5), // rparen, reduce: Expression
			nil,       // int
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // semicolon
			reduce(9), // plus, reduce: Term
			reduce(9), // minus, reduce: Term
			reduce(9), // mul, reduce: Term
			reduce(9), // div, reduce: Term
			nil,       // lparen
			reduce(9), // rparen, reduce: Term
			nil,       // int
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // semicolon
			reduce(10), // plus, reduce: Term
			reduce(10), // minus, reduce: Term
			reduce(10), // mul, reduce: Term
			reduce(10), // div, reduce: Term
			nil,        // lparen
			reduce(10), // rparen, reduce: Term
			nil,        // int
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // semicolon
			reduce(12), // plus, reduce: Factor
			reduce(12), // minus, reduce: Factor
			reduce(12), // mul, reduce: Factor
			reduce(12), // div, reduce: Factor
			nil,        // lparen
			reduce(12), // rparen, reduce: Factor
			nil,        // int
		},
	},
}
