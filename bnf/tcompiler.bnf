/* Lexical Parser */
!whitespace : '\t' | '\n' | '\r' | ' ' ;

_digit : '0'-'9' ;

int : '0' | '1'-'9' {_digit} ;

/* punctuation */
plus : '+' ;
minus : '-' ;
mul : '*' ;
div : '/' ;

lparen : '(' ;
rparen : ')' ;
semicolon : ';' ;

/* Syntactic Parser */

<<
import (
	"github.com/day-dreams/TrivialCompiler/ast"
)
>>

Program
  : Statements  << ast.NewProgram($0) >>
  ;

 Statements
  : Statements Statement << ast.AppendStatement($0, $1) >>
  | empty << ast.NewStatementList() >>
  ;


 Statement
  : Expression semicolon << ast.NewExpressionStatement($0) >>
  ;

Expression
  : Expression Operation Term << ast.NewInfixExpression($0, $2, $1) >>
  | Term
  ;

 Operation
 	: plus
 	| minus
 	;

Term
  : Term mul Factor << ast.NewInfixExpression($0, $2, $1) >>
  | Term div Factor << ast.NewInfixExpression($0, $2, $1) >>
  | Factor
  ;

Factor
  : lparen Expression rparen    << $1, nil >>
  | int 					    << ast.NewIntegerLiteral($0) >>
  ;
